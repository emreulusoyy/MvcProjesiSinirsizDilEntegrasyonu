// <auto-generated />
using System;
using DataAccessLayer.Concrete;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DataAccessLayer.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20230626192212_footer")]
    partial class footer
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("EntityLayer.Entities.About", b =>
                {
                    b.Property<int>("AboutID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AboutImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BannerImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AboutID");

                    b.ToTable("Abouts");
                });

            modelBuilder.Entity("EntityLayer.Entities.AboutLanguageItem", b =>
                {
                    b.Property<int>("AboutLanguageItemID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AboutDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AboutID")
                        .HasColumnType("int");

                    b.Property<string>("AboutTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmployeeSubtitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmployeeTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LanguageID")
                        .HasColumnType("int");

                    b.Property<string>("MissionDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MissionDescriptionCard1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MissionDescriptionCard2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MissionDescriptionCard3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MissionDescriptionCard4")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MissionPretitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MissionTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PageBannerSubtitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PageName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StatisticDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StatisticItemName1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StatisticItemName2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StatisticItemName3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StatisticItemName4")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StatisticItemName5")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StatisticItemValue1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StatisticItemValue2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StatisticItemValue3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StatisticItemValue4")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StatisticItemValue5")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StatisticPretitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StatisticTitle")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AboutLanguageItemID");

                    b.HasIndex("AboutID");

                    b.HasIndex("LanguageID");

                    b.ToTable("AboutLanguageItems");
                });

            modelBuilder.Entity("EntityLayer.Entities.AppRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("EntityLayer.Entities.AppUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("EntityLayer.Entities.Category", b =>
                {
                    b.Property<int>("CategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("CategoryID");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("EntityLayer.Entities.CategoryLanguageItem", b =>
                {
                    b.Property<int>("CategoryLanguageItemID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryID")
                        .HasColumnType("int");

                    b.Property<int>("LanguageID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryLanguageItemID");

                    b.HasIndex("CategoryID");

                    b.HasIndex("LanguageID");

                    b.ToTable("CategoryLanguageItems");
                });

            modelBuilder.Entity("EntityLayer.Entities.Contact", b =>
                {
                    b.Property<int>("ContactID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddresIframe")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BannerImage")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ContactID");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("EntityLayer.Entities.ContactLanguageItem", b =>
                {
                    b.Property<int>("ContactLanguageItemID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddressValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ContactID")
                        .HasColumnType("int");

                    b.Property<string>("HaveQuestion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LabelAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LabelMail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LabelPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LanguageID")
                        .HasColumnType("int");

                    b.Property<string>("MailValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PageBannerSubtitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PageName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlaceholderFullname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlaceholderMail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlaceholderMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlaceholderPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlaceholderSubject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SendButton")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("contactUs")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ContactLanguageItemID");

                    b.HasIndex("ContactID");

                    b.HasIndex("LanguageID");

                    b.ToTable("ContactLanguageItems");
                });

            modelBuilder.Entity("EntityLayer.Entities.ContactMessage", b =>
                {
                    b.Property<int>("ContactMessageID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Subject")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ContactMessageID");

                    b.ToTable("ContactMessages");
                });

            modelBuilder.Entity("EntityLayer.Entities.Employee", b =>
                {
                    b.Property<int>("EmployeeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("EmployeeID");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("EntityLayer.Entities.EmployeeLanguageItem", b =>
                {
                    b.Property<int>("EmployeeLanguageItemID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EmployeeID")
                        .HasColumnType("int");

                    b.Property<int>("LanguageID")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EmployeeLanguageItemID");

                    b.HasIndex("EmployeeID");

                    b.HasIndex("LanguageID");

                    b.ToTable("EmployeeLanguageItems");
                });

            modelBuilder.Entity("EntityLayer.Entities.Footer", b =>
                {
                    b.Property<int>("FooterID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FacebookLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FacebookStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GoogleLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GoogleStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LinkedinLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LinkedinStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PinterestLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PinterestStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TwitterLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TwitterStatus")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FooterID");

                    b.ToTable("Footers");
                });

            modelBuilder.Entity("EntityLayer.Entities.FooterLanguageItem", b =>
                {
                    b.Property<int>("FooterLanguageItemID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CategoryTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FooterID")
                        .HasColumnType("int");

                    b.Property<string>("PageTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FooterLanguageItemID");

                    b.HasIndex("FooterID");

                    b.ToTable("FooterLanguageItems");
                });

            modelBuilder.Entity("EntityLayer.Entities.Home", b =>
                {
                    b.Property<int>("HomeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BannerImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CategoryImagePath1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CategoryImagePath2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CategoryImagePath3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CategoryImagePath4")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InfoImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("HomeID");

                    b.ToTable("Homes");
                });

            modelBuilder.Entity("EntityLayer.Entities.HomeLanguageItem", b =>
                {
                    b.Property<int>("HomeLanguageItemID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BannerMoreButton")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BannerPretitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BannerTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CategoryMoreButton")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CategoryPretitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CategorySubtitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CategoryTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactJoinUsPlaceholder")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactPretitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactSubcribeButton")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactSubtitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HomeID")
                        .HasColumnType("int");

                    b.Property<string>("InfoDescription1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InfoDescription2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InfoDescription3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InfoTitle1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InfoTitle2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InfoTitle3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LanguageID")
                        .HasColumnType("int");

                    b.Property<string>("PageName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductViewAllButton")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("HomeLanguageItemID");

                    b.HasIndex("HomeID");

                    b.HasIndex("LanguageID");

                    b.ToTable("HomeLanguageItems");
                });

            modelBuilder.Entity("EntityLayer.Entities.Language", b =>
                {
                    b.Property<int>("LanguageID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("LanguageID");

                    b.ToTable("Languages");
                });

            modelBuilder.Entity("EntityLayer.Entities.Product", b =>
                {
                    b.Property<int>("ProductID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryID")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("ProductID");

                    b.HasIndex("CategoryID");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("EntityLayer.Entities.ProductLanguageItem", b =>
                {
                    b.Property<int>("ProductLanguageItemID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("LanguageID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.HasKey("ProductLanguageItemID");

                    b.HasIndex("LanguageID");

                    b.HasIndex("ProductID");

                    b.ToTable("ProductLanguageItems");
                });

            modelBuilder.Entity("EntityLayer.Entities.SubProduct", b =>
                {
                    b.Property<int>("SubProductID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("SubProductID");

                    b.HasIndex("ProductID");

                    b.ToTable("SubProducts");
                });

            modelBuilder.Entity("EntityLayer.Entities.SubProductLanguageItem", b =>
                {
                    b.Property<int>("SubProductLanguageItemID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Detail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LanguageID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SubProductID")
                        .HasColumnType("int");

                    b.HasKey("SubProductLanguageItemID");

                    b.HasIndex("LanguageID");

                    b.HasIndex("SubProductID");

                    b.ToTable("SubProductLanguageItems");
                });

            modelBuilder.Entity("EntityLayer.Entities.Subscriber", b =>
                {
                    b.Property<int>("SubscriberID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SubscriberID");

                    b.ToTable("Subscribers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("EntityLayer.Entities.AboutLanguageItem", b =>
                {
                    b.HasOne("EntityLayer.Entities.About", "About")
                        .WithMany("AboutLanguageItems")
                        .HasForeignKey("AboutID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EntityLayer.Entities.Language", "Language")
                        .WithMany("AboutLanguageItems")
                        .HasForeignKey("LanguageID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("About");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("EntityLayer.Entities.CategoryLanguageItem", b =>
                {
                    b.HasOne("EntityLayer.Entities.Category", "Category")
                        .WithMany("CategoryLanguageItems")
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EntityLayer.Entities.Language", "Language")
                        .WithMany("CategoryLanguageItems")
                        .HasForeignKey("LanguageID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("EntityLayer.Entities.ContactLanguageItem", b =>
                {
                    b.HasOne("EntityLayer.Entities.Contact", "Contact")
                        .WithMany("ContactLanguageItems")
                        .HasForeignKey("ContactID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EntityLayer.Entities.Language", "Language")
                        .WithMany("ContactLanguageItems")
                        .HasForeignKey("LanguageID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contact");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("EntityLayer.Entities.EmployeeLanguageItem", b =>
                {
                    b.HasOne("EntityLayer.Entities.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EntityLayer.Entities.Language", "Language")
                        .WithMany("EmployeeLanguageItems")
                        .HasForeignKey("LanguageID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("EntityLayer.Entities.FooterLanguageItem", b =>
                {
                    b.HasOne("EntityLayer.Entities.Footer", "Footer")
                        .WithMany("FooterLanguageItems")
                        .HasForeignKey("FooterID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Footer");
                });

            modelBuilder.Entity("EntityLayer.Entities.HomeLanguageItem", b =>
                {
                    b.HasOne("EntityLayer.Entities.Home", "Home")
                        .WithMany("HomeLanguageItems")
                        .HasForeignKey("HomeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EntityLayer.Entities.Language", "Language")
                        .WithMany("HomeLanguageItems")
                        .HasForeignKey("LanguageID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Home");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("EntityLayer.Entities.Product", b =>
                {
                    b.HasOne("EntityLayer.Entities.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("EntityLayer.Entities.ProductLanguageItem", b =>
                {
                    b.HasOne("EntityLayer.Entities.Language", "Language")
                        .WithMany("ProductLanguageItems")
                        .HasForeignKey("LanguageID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EntityLayer.Entities.Product", "Product")
                        .WithMany("ProductLanguageItems")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("EntityLayer.Entities.SubProduct", b =>
                {
                    b.HasOne("EntityLayer.Entities.Product", "Product")
                        .WithMany("SubProducts")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("EntityLayer.Entities.SubProductLanguageItem", b =>
                {
                    b.HasOne("EntityLayer.Entities.Language", "Language")
                        .WithMany("SubProductLanguageItems")
                        .HasForeignKey("LanguageID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EntityLayer.Entities.SubProduct", "SubProduct")
                        .WithMany("SubProductLanguageItems")
                        .HasForeignKey("SubProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("SubProduct");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("EntityLayer.Entities.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("EntityLayer.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("EntityLayer.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("EntityLayer.Entities.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EntityLayer.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("EntityLayer.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EntityLayer.Entities.About", b =>
                {
                    b.Navigation("AboutLanguageItems");
                });

            modelBuilder.Entity("EntityLayer.Entities.Category", b =>
                {
                    b.Navigation("CategoryLanguageItems");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("EntityLayer.Entities.Contact", b =>
                {
                    b.Navigation("ContactLanguageItems");
                });

            modelBuilder.Entity("EntityLayer.Entities.Footer", b =>
                {
                    b.Navigation("FooterLanguageItems");
                });

            modelBuilder.Entity("EntityLayer.Entities.Home", b =>
                {
                    b.Navigation("HomeLanguageItems");
                });

            modelBuilder.Entity("EntityLayer.Entities.Language", b =>
                {
                    b.Navigation("AboutLanguageItems");

                    b.Navigation("CategoryLanguageItems");

                    b.Navigation("ContactLanguageItems");

                    b.Navigation("EmployeeLanguageItems");

                    b.Navigation("HomeLanguageItems");

                    b.Navigation("ProductLanguageItems");

                    b.Navigation("SubProductLanguageItems");
                });

            modelBuilder.Entity("EntityLayer.Entities.Product", b =>
                {
                    b.Navigation("ProductLanguageItems");

                    b.Navigation("SubProducts");
                });

            modelBuilder.Entity("EntityLayer.Entities.SubProduct", b =>
                {
                    b.Navigation("SubProductLanguageItems");
                });
#pragma warning restore 612, 618
        }
    }
}
